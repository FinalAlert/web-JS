1. Чому typeof null повертає "object"?
Це помилка в мові JavaScript, яка збереглася з ранніх версій для зворотної сумісності. Насправді null є примітивним типом, але через історичну реалізацію typeof null повертає "object".

2. Яка різниця між let, const і var?
var: має функціональну область видимості (не блочну), піднімається (hoisting) і може бути переоголошена.
let: має блочну область видимості, не піднімається, не може бути переоголошена в межах одного блоку.
const: також має блочну область видимості, але є константою, яка не може бути переприсвоєна після ініціалізації.

3. Що станеться, якщо викликати неоголошену змінну в strict mode?
У strict mode спроба викликати неоголошену змінну призведе до помилки ReferenceError. Без strict mode JavaScript створить глобальну змінну, що може призвести до неочікуваних помилок.

4. Як працює перетворення типів у JavaScript?
JavaScript використовує "неявне перетворення типів" (type coercion) під час операцій. Наприклад, при додаванні числа та рядка (5 + "5"), число перетворюється на рядок. Для явного перетворення використовують функції, наприклад Number(), String(), Boolean().

5. Які переваги strict mode?
Підвищує продуктивність коду за рахунок оптимізації.
Запобігає використанню неоголошених змінних.
Забороняє дублювання імен параметрів у функціях.
Запобігає помилковим викликам методів на null або undefined.

6. Що може статися, якщо не використовувати strict mode?
Код може містити більше помилок, які залишаться непоміченими.
Можливе створення глобальних змінних випадково, що призводить до непередбачуваної поведінки.
У деяких випадках JavaScript буде виконувати некоректний код без повідомлення про помилку.

7. Як впливають різні типи змінних на область видимості?
var: область видимості обмежена функцією (не блоку).
let і const: область видимості обмежена блоком (наприклад, всередині {}).

8. Які помилки ви зустрічали при використанні prompt() чи alert()?
prompt() повертає null, якщо користувач натиснув "Скасувати".
alert() блокує виконання коду до закриття вікна, що може бути незручним для користувача.
Обидва методи є синхронними, що може погіршити взаємодію з користувачем.

9.  Чим додаткове завдання (конвертер температур) розширює ваше розуміння роботи з функціями та умовними конструкціями?
Це завдання демонструє:
Використання замикань для створення спеціалізованих функцій.
Роботу з умовними операторами (if, else).
Практичне застосування функцій каррінгу для зручного перетворення одиниць вимірювання.